---
title: "Quiz 01 - Midterm"
format: html
---



# SETUP

You must run this!

```{r}
#| label: setup
#| message: false

library(Stat2Data)
library(janitor)
library(rio)
library(tidyverse)
options(scipen = 999)

# This midterm uses TWO data sets.

# Imports appointments data:
#  - Sets column names to lower case
#  - Fixes some unusual spelling conventions in the column names
appointments <-
  read_csv("./data/Appointments.csv") |>
  clean_names() |>
  rename(
    handicap = handcap,
    hypertension = hipertension,
    neighborhood = neighbourhood
  )

# Import High Peaks data and make column names lower case.
data(HighPeaks)
high_peaks <- HighPeaks |> clean_names()
rm(HighPeaks)

```



# Appointments


## Task 01: 822145925426128

- Questions (2):
    A. How many appointments did patient 822145925426128 (`patient_id`) have?
    B. How many no-show appointments did 822145925426128 have?
- Answer: 
    A. Appointments: 88
    B. No-show Appointments: 1

```{r}

# Simplest way to get the appointments count.
# But it doesn't give us an easy way to get the count of no-shows.
appointments |>
  filter(patient_id == 822145925426128)

# To get the count of no-shows:
appointments |>
  filter(patient_id == 822145925426128, no_show)

```


```{r}

# Better answer:
appointments |>
  filter(patient_id == 822145925426128) |>
  summarize(
    appointments = n(),
    no_shows = sum(no_show)
    )

```


## Task 02: Average Age of Patients By Gender

- Question: Using the patient's age at the time of their appointment, which gender is older?
    - F: Female
    - M: Male
- Answer: F: Female
- Helpful Hint:
    - Calculate the average age per gender.

```{r}
# This is a new question for 2025.

appointments |> group_by(gender) |> summarize(mean(age))

```

```
gender `mean(age)`
  <chr>        <dbl>
1 F             38.9
2 M             33.7
```


## Task 03: Oldest Diabetic Patient

- Question: How old is the oldest diabetic patient?
- Answer: 99

```{r}
# This is a new questions for 2025.


appointments |> filter(diabetes) |> summarize(max(age))

# OR !!!

appointments |> group_by(diabetes) |> summarize(max(age))

```


## Task 04: Plot Number Of No-Shows by Appointment Day

Create a bar plot of No-Show appointments by appointment day and use your plot to answer the following question. Upload your graph to Canvas to support your answer.

- Question: Among those days which are in our data set, which day of the week has the fewest total no-shows?
- Answer: 

```{r}

ggplot(appointments |>
         filter(no_show),
       aes(x = appointment_day)) +
  geom_bar()

# OR

appointments |>
  filter(no_show) |>
  ggplot(aes(x = appointment_day)) +
  geom_bar()

```


## Task 05: Count of No-Show Appointments

- Question: How many no-show appointments are there in the data?
- Answer: 22,319

```{r}
# This question actually gives you a lot of useful information.

# Simplest solution:
appointments |> filter(no_show)

# OR
appointments |> filter(no_show) |> count()

# OR
appointments |> count(no_show)

# OR
appointments |> group_by(no_show) |> count()

# OR!!!!
appointments |> summarize(no_shows= sum(no_show))

# OR !!!
appointments |> group_by(no_show) |> summarize(n = n())

```


## Task 06: Percent No-Show

- Question: What percentage of appointments are no-shows?
- Answer: 20.2

```{r}

appointments |>
  summarize(num = sum(no_show), den = n())
  mutate(p = 100*num/den)

```

```
  num    den     p
  <int>  <int> <dbl>
1 22319 110527  20.2
```



```{r}

appointments |>
  summarize(num = sum(no_show), den = n()) |>
  mutate(p = 100*num/den)

```

```
  num    den     p
  <int>  <int> <dbl>
1 22319 110527  20.2
```


## Task 07: Risk of No-Show, Received SMS

For this task, I want you to write down a hypothesis before you write any code. Record your hypothesis and a brief explanation below. Then use the tools we have learned in this class to answer the the question and write that down next to "Conclusion", below.

- Question: About 32 percent of appointments received a SMS call reminder before their appointment. When patients received a SMS call, were they more or less likely to no-show, compared to those who did NOT receive a a SMS reminder?
- Hypothesis:
- Conclusion: Patients who received the SMS were more likely to no-show.
- Were you surprised?

```{r}
# This one gave folks a hard time in 2023-2024.
# So I rewrote the question.

# This is how I've demoed this in class/labs.
appointments |>
  group_by(received_sms) |>
  summarize(
    appointments = n(),
    no_shows = sum(no_show)) |>
  mutate(rate = 100*no_shows/appointments)

# This also works.
appointments |>
  group_by(received_sms) |>
  summarize(
    appointments = n(),
    no_shows = sum(no_show),
    rate = 100*no_shows/appointments
  )

```

```
# A tibble: 2 × 4
  received_sms appointments no_shows  rate
  <lgl>               <int>    <int> <dbl>
1 FALSE               75045    12535  16.7
2 TRUE                35482     9784  27.6
```


## Task 08: Distribution of No-Shows

Create a density plot of the no-shows per patient. Use it to answer the following question.

- Question: How would you describe the distribution of no-shows?
    - Normally distributed
    - Negatively Skwewed
    - Positively Skewed
- Answer: Positively skewed.
- Extra Credit: Because the counts are all integers, they numbers necessarily cluster around specific points on the plot.

```{r}

# THIS IS THE RIGHT ANSWER!!!
no_show_counts <-
  appointments |>
  group_by(patient_id) |>
  summarize(no_shows = sum(no_show))

no_show_counts |>
  ggplot(aes(x = no_shows)) +
  geom_histogram()

no_show_counts |>
  ggplot(aes(x = no_shows)) + 
  geom_density()

# Not requested, but as a table:
no_show_counts |>
  count(no_shows)

```

The following code examples demonstrate ways I've seen this answered incorrectly.

### Wrong Answer - Filtered:

Not the right answer, because it EXCLUDES patients with ZERO no-shows.

```{r}

# NOT THE RIGHT ANSWER
# BUT SOME OF YOU DID THIS!
filtered_no_show_counts <-
  appointments |>
  filter(no_show) |>
  group_by(patient_id) |>
  summarize(no_shows = sum(no_show))

filtered_no_show_counts |>
  ggplot(aes(x = no_shows)) +
  geom_density()

filtered_no_show_counts |>
  ggplot(aes(x = no_shows)) +
  geom_histogram()

```

### Wrong Answer - NO Shows Grouped:

```{r}

# NOT THE RIGHT ANSWER
# BUT SOME OF YOU DID THIS!
grouped_no_show_counts <-
  appointments |>
  group_by(patient_id, no_show) |>
  summarize(no_shows = sum(no_show))

grouped_no_show_counts |>
  ggplot(aes(x = no_shows)) +
  geom_density()

grouped_no_show_counts |>
  ggplot(aes(x = no_shows)) +
  geom_histogram()

```


## Task 09: No-Shows over 50 years of age

- Question: How would you describe the no-show rate of patients over 50 compared to other patients?
  - Higher
  - Lower
  - About the same
- Answer: Lower, 16.2 percent vs 22.1

```{r}

appointments |>
  mutate(age_over_50 = age > 50) |>
  group_by(age_over_50) |>
  summarize(
    no_shows = sum(no_show),
    appointments = n(),
    100*no_shows/appointments
  )

```

```
# A tibble: 2 × 4
  age_over_50 no_shows appointments `100 * no_shows/appointments`
  <lgl>          <int>        <int>                         <dbl>
1 FALSE          16592        75104                          22.1
2 TRUE            5727        35423                          16.2
```



# High Peaks


## Task 10 Difficulty and Time

- Question: On average, do more difficult hikes take more time than easier hikes?
    - No
    - Yes
- Answer:
    - Use your table to support your answer in Canvas.
- Extra Credit:
    - Plot this relationship between difficulty and average time to complete the hike and use this to support your answer and receive an extra 2.5 points.

```{r}

high_peaks |>
  group_by(difficulty) |>
  summarize(mean(time))
  
```

```
# A tibble: 6 × 2
  difficulty `mean(time)`
       <int>        <dbl>
1          2         5   
2          3         5.5 
3          4         8.61
4          5         9.93
5          6        11   
6          7        15   
```

For the extra credit:

```{r}

high_peaks |>
  group_by(difficulty) |>
  summarize(avg_time = mean(time)) |>
  ggplot(aes(x = difficulty, y = avg_time)) +
  geom_col()

```


## Task 11 Length vs Ascent

We can use this data to predict the amount of time it will take to complete a hike in the Adirondacks.

- Question: Based on your plots, which is a better predictor of hike time, the length of the hike or the height of the ascent?
    - length
    - ascent
- Answer: Length
    - Steeper slope, the range of values is smaller.

 
```{r}

# Just the scatter plots
high_peaks |>
  ggplot(aes(x = length, y = time)) +
  geom_point()

high_peaks |>
  ggplot(aes(x = ascent, y = time)) +
  geom_point()

# Scatter plots and regression lines
high_peaks |>
  ggplot(aes(x = length, y = time)) +
  geom_point() +
  geom_smooth(method = "lm")

high_peaks |>
  ggplot(aes(x = ascent, y = time)) +
  geom_point() +
  geom_smooth(method = "lm")

```

Sometimes, I see answers where students forget to use a linear model for the regression line. This is a regression, but it is not a linear regression, but it is still worth some points!


```{r}

# Scatter plots and regression lines
high_peaks |>
  ggplot(aes(x = length, y = time)) +
  geom_point() +
  geom_smooth()

high_peaks |>
  ggplot(aes(x = ascent, y = time)) +
  geom_point() +
  geom_smooth()

```
